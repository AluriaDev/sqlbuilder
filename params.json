{"name":"Sqlbuilder","tagline":"SQL Builder Library for Java","body":"# SQL Builder Utilities\r\n\r\nThis package contains a number of utility classes to simplify working with SQL.\r\n\r\n## Builders\r\n\r\nBuilders simplify the creation of SQL strings. They know a little bit about SQL syntax, and make the creation of dynamic SQL a little nicer in Java. Like Java's `StringBuilder`, they use chainable calls. Here's an example of using `SelectBuilder`.\r\n\r\n    new SelectBuilder()\r\n    .column(\"name\")\r\n    .column(\"age\")\r\n    .from(\"Employee\")\r\n    .where(\"dept = 'engineering'\")\r\n    .where(\"salary > 100000\")\r\n    .toString();\r\n\r\nThis produces the SQL string `select name, age from Employee where dept = 'engineering' and salary > 100000`. Note how `SelectBuilder` knows to join the columns with a comma and to join the where clauses with `and`.\r\n\r\nFor more info, see <http://john.krasnay.ca/2010/02/15/building-sql-in-java.html>\r\n\r\n## ParameterizedPreparedStatementCreator\r\n\r\nSpring has a powerful abstraction known as `JdbcTemplate` that makes working with JDBC bearable. `JdbcTemplate` takes care of the proper allocation and disposal of JDBC connections from a `DataSource`. It never returns a `Connection`; instead, connection objects are passed to callbacks provided by the caller. Once such callback, the `PreparedStatementCreator`, is used to create a prepared statement given\r\na connection.\r\n\r\nIn a typical `PreparedStatementCreator`, one creates SQL with substitutable parameters indicated by question marks, then sets the parameter values by index. Keeping track of these indexes can be\r\nchallenging when working with dynamic SQL. To simplify this, `ParamerizedPreparedStatementCreator` uses named parameters. Here's an example:\r\n\r\n    PreparedStatementCreator psc =\r\n        new ParameterizedPreparedStatementCreator()\r\n        .setSql(\"update Employee set name = :name where id = :id\")\r\n        .setParameter(\"name\", \"Bob\")\r\n        .setParameter(\"id\", 42);\r\n\r\n    new JdbcTemplate(dataSource).update(psc);\r\n\r\n\r\n## Creators\r\n\r\nEach builder class has a corresponding `Creator` class that combines a builder and a `ParameterizedPreparedStatmentCreator`.\r\n\r\n    PreparedStatementCreator psc =\r\n        new UpdateCreator(\"Employee\")\r\n        .setValue(\"name\", \"Bob\")\r\n        .whereEquals(\"id\", 42);\r\n\r\n    new JdbcTemplate(dataSource).update(psc);\r\n\r\nCreators don't add much functionality themselves, but they make working with builders and  `ParameterizedPreparedStatementCreator`s a little easier (plus you don't have to keep typing that ridiculously large class name!).\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}